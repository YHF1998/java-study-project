<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <!--最简单的模式-->
    <bean id="studentOne" class="org.example.spring.pojo.Student"/>

    <!--依赖注入-->
    <bean id="studentTwo" class="org.example.spring.pojo.Student">
        <property name="sid" value="12"/>
        <property name="age" value="12"/>
        <property name="sname" value="小明"/>
        <property name="gender" value="男"/>
    </bean>

    <!--有参构造，直接注入-->
    <bean id="studentThree" class="org.example.spring.pojo.Student">
        <!--如果是按顺序写，甚至不需要声明name属性-->
        <constructor-arg name="sid" value="12"/>
        <constructor-arg name="sname" value="小菜"/>
        <constructor-arg name="age" value="18"/>
        <constructor-arg name="gender" value="女"/>
    </bean>

    <!--设置空值/空对象 也就是null-->
    <bean id="studentFour" class="org.example.spring.pojo.Student">
        <property name="sid" value="12"/>
        <property name="age" value="12"/>
        <property name="sname" value="小明"/>
        <!--错误null的设置方式，这种是一个字符串-->
        <!--<property name="gender" value="null"/>-->
        <!--正确方式-->
        <property name="gender">
            <null/>
        </property>
    </bean>

    <bean id="studentFive" class="org.example.spring.pojo.Student">
        <property name="sid" value="12"/>
        <property name="age" value="12"/>
        <!--处理带有特殊字符的内容，需要使用CDATA 进行包裹-->
        <!--需要注意的是，使用value标签包裹的话，在标签内进行回车，也是会当成字符进行传递的-->
        <property name="sname">
            <!--
                <：&lt;
                >：&gt;
                CDATA节其中的内容会原样解析<![CDATA[...]]>
                CDATA节是xml中一个特殊的标签，因此不能写在一个属性中
            -->

            <value><![CDATA[<小明>]]></value>
        </property>
        <property name="gender" value="男"/>
    </bean>


    <!--处理实体类中，类属性值是其他类的内容时：方式一：使用ref标签属性-->
    <bean id="studentSix" class="org.example.spring.pojo.Student">
        <property name="age" value="32"/>
        <property name="sid" value="66"/>
        <property name="sname" value="王五"/>
        <property name="gender" value="男"/>
        <!--重点就是这行，使用ref引用下面id为clazzOne的javaBean，从而实现类属性值为另一个类的依赖注入操作-->
        <property name="clazz" ref="clazzOne"/>
    </bean>
    <bean id="clazzOne" class="org.example.spring.pojo.Clazz">
        <property name="id" value="1"/>
        <property name="name" value="一班"/>
    </bean>

    <!--处理实体类中，类属性值是其他类的内容时：方式二：级联（用的频率不高 因为这种方式还要前置使用ref 也就是方式一）-->
    <bean id="studentSeven" class="org.example.spring.pojo.Student">
        <property name="age" value="32"/>
        <property name="sid" value="66"/>
        <property name="sname" value="王五"/>
        <property name="gender" value="男"/>
        <!--这个操作就是实例化，然后赋值-->
        <property name="clazz" ref="clazzOne"/>
        <property name="clazz.name" value="就这就这"/>
        <property name="clazz.id" value="2"/>
    </bean>

    <!--处理实体类中，类属性值是其他类的内容时：方式三：内部bean-->
    <bean id="studentEight" class="org.example.spring.pojo.Student">
        <property name="age" value="32"/>
        <property name="sid" value="66"/>
        <property name="sname" value="王五"/>
        <property name="gender" value="男"/>
        <property name="clazz">
            <!--内部bean是无法在ioc容器里面获取，他的作用域只有studentEight范围内-->
            <bean id="clazzInner" class="org.example.spring.pojo.Clazz">
                <property name="id" value="3"/>
                <property name="name" value="哈哈哈哈哈"/>
            </bean>
        </property>
    </bean>

    <!--属性类型为数组的依赖注入-->
    <bean id="studentNine" class="org.example.spring.pojo.Student">
        <property name="age" value="32"/>
        <property name="sid" value="66"/>
        <property name="sname" value="王五"/>
        <property name="gender" value="男"/>
        <property name="clazz">
            <!--内部bean是无法在ioc容器里面获取，他的作用域只有studentEight范围内-->
            <bean id="clazzInner" class="org.example.spring.pojo.Clazz">
                <property name="id" value="3"/>
                <property name="name" value="哈哈哈哈哈"/>
            </bean>
        </property>
        <!--数组-->
        <property name="hobby">
            <array>
                <value>游泳</value>
                <value>滑雪</value>
                <value>溜冰</value>
            </array>
        </property>
        <!--该学生，有哪些老师教 :方式一-->
        <!--<property name="teacherMap">-->
        <!--    <map>-->
        <!--        <entry key="10086" value-ref="teacherOne"/>-->
        <!--        <entry key="10087" value-ref="teacherTwo"/>-->
        <!--    </map>-->
        <!--</property>-->

        <!--该学生，有哪些老师教 :方式二 引用  util:map ref-->
        <property name="teacherMap" ref="teacherMap1"/>
    </bean>

    <!--属性类型为list的依赖注入 方式一-->
    <bean id="clazzTwo" class="org.example.spring.pojo.Clazz">
        <property name="name" value="一班"/>
        <property name="id" value="1"/>
        <!--重点是这里，使用list标签-->
        <property name="studentList">
            <list>
                <ref bean="studentOne"/>
                <ref bean="studentTwo"/>
                <ref bean="studentThree"/>
                <ref bean="studentFour"/>
            </list>
        </property>
    </bean>

    <!--属性类型为list的依赖注入 方式二：配置一个集合类型的bean 使用util约束-->
    <util:list id="studentListOne">
        <ref bean="studentOne"/>
        <ref bean="studentTwo"/>
        <ref bean="studentThree"/>
        <ref bean="studentFour"/>
    </util:list>
    <bean id="clazzThree" class="org.example.spring.pojo.Clazz">
        <property name="name" value="一班"/>
        <property name="id" value="1"/>
        <!--重点是这里，使用util:list标签-->
        <property name="studentList" ref="studentListOne"/>
    </bean>


    <bean id="teacherOne" class="org.example.spring.pojo.Teacher">
        <property name="id" value="1"/>
        <property name="tname" value="cc老师"/>
    </bean>


    <bean id="teacherTwo" class="org.example.spring.pojo.Teacher">
        <property name="id" value="2"/>
        <property name="tname" value="koko老师"/>
    </bean>

    <!--类型属性为map的依赖注入-->
    <util:map id="teacherMap1">
        <entry key="10086" value-ref="teacherOne"/>
        <entry key="10087" value-ref="teacherTwo"/>
    </util:map>


    <!--一种新方式，p命名空间-->
    <bean id="student11" class="org.example.spring.pojo.Student" p:sid="100" p:age="18"/>

</beans>